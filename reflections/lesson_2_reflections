What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository it creates a .git file that tracks meta data. This is necessary because this metadata is used to track commit history.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is just the directory that is currently being worked inside of. The staging area operates within the working directory, and its value is in the ability to view and modify potential commits before they are made.

How can you use the staging area to make sure you have one commit per logical change?

Before committing a change you can look at the staging area and ask yourself, "do all of these changes on these files have to do with the same fix/change or are they fixing/changing multiple things". If all of the changes address multiple different issues then it is likely that the commit is too large and has too many logical changes.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when you have multiple different versions of a project in which commits should not always affect all versions.

How do the diagrams help you visualize the branch structure?

It helps to show how branches relate to the master branch and shows how certain commits can become "lost" by being unreachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a commit that has two parents from separate branches. This is represented in the diagram to show that the merge does in fact create a new commit and that the previous two branches are terminal to the new commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic - Pros: Fast, good for merging when differences are not on the same files
				Cons: Potentially lets conflicts slip by

	Manually - 	Pros: Careful, methodical, less prone to errors
				Cons: Slow, tedious, and not ideal for merges in which there are not differences between the same files

